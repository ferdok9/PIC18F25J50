D G "__PCH__" 0 0 ""5.025""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""01-Apr-15""
D G "__TIME__" 0 0 ""17:09:41""
D G "__18F25J50" 0 0 "TRUE" "Standard Header file for the PIC18F25J50 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 46 "int8" `54 
f B "set_tris_a" 2 46 "void(int8 value)" `53 
v L "value" 2 47 "int8" `56 
f B "set_tris_b" 2 47 "void(int8 value)" `55 
v L "value" 2 48 "int8" `58 
f B "set_tris_c" 2 48 "void(int8 value)" `57 
f B "get_tris_a" 2 49 "int8()" `59 
f B "get_tris_b" 2 50 "int8()" `60 
f B "get_tris_c" 2 51 "int8()" `61 
v L "value" 2 52 "int8" `63 
f B "output_a" 2 52 "void(int8 value)" `62 
v L "value" 2 53 "int8" `65 
f B "output_b" 2 53 "void(int8 value)" `64 
v L "value" 2 54 "int8" `67 
f B "output_c" 2 54 "void(int8 value)" `66 
f B "input_a" 2 55 "int8()" `68 
f B "input_b" 2 56 "int8()" `69 
f B "input_c" 2 57 "int8()" `70 
f B "input_change_a" 2 58 "int8()" `71 
f B "input_change_b" 2 59 "int8()" `72 
f B "input_change_c" 2 60 "int8()" `73 
v L "pin" 2 61 "int16" `75 
f B "input" 2 61 "int8(int16 pin)" `74 
v L "pin" 2 62 "int16" `77 
f B "input_state" 2 62 "int8(int16 pin)" `76 
v L "pin" 2 63 "int16" `79 
f B "output_low" 2 63 "void(int16 pin)" `78 
v L "pin" 2 64 "int16" `81 
f B "output_high" 2 64 "void(int16 pin)" `80 
v L "pin" 2 65 "int16" `83 
f B "output_toggle" 2 65 "void(int16 pin)" `82 
v L "pin" 2 66 "int16" `85 
v L "level" 2 66 "int8" `86 
f B "output_bit" 2 66 "void(int16 pin,int8 level)" `84 
v L "pin" 2 67 "int16" `88 
f B "output_float" 2 67 "void(int16 pin)" `87 
v L "pin" 2 68 "int16" `90 
f B "output_drive" 2 68 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 72 "31744"
d G "PIN_A1" 2 73 "31745"
d G "PIN_A2" 2 74 "31746"
d G "PIN_A3" 2 75 "31747"
d G "PIN_A5" 2 76 "31749"
d G "PIN_A6" 2 77 "31750"
d G "PIN_A7" 2 78 "31751"
d G "PIN_B0" 2 80 "31752"
d G "PIN_B1" 2 81 "31753"
d G "PIN_B2" 2 82 "31754"
d G "PIN_B3" 2 83 "31755"
d G "PIN_B4" 2 84 "31756"
d G "PIN_B5" 2 85 "31757"
d G "PIN_B6" 2 86 "31758"
d G "PIN_B7" 2 87 "31759"
d G "PIN_C0" 2 89 "31760"
d G "PIN_C1" 2 90 "31761"
d G "PIN_C2" 2 91 "31762"
d G "PIN_C3" 2 92 "31763"
d G "PIN_C4" 2 93 "31764"
d G "PIN_C5" 2 94 "31765"
d G "PIN_C6" 2 95 "31766"
d G "PIN_C7" 2 96 "31767"
d G "FALSE" 2 99 "0"
d G "TRUE" 2 100 "1"
d G "BYTE" 2 102 "int8"
d G "BOOLEAN" 2 103 "int1"
d G "getc" 2 105 "getch"
d G "fgetc" 2 106 "getch"
d G "getchar" 2 107 "getch"
d G "putc" 2 108 "putchar"
d G "fputc" 2 109 "putchar"
d G "fgets" 2 110 "gets"
d G "fputs" 2 111 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 116 "int8()" `91 
f B "reset_cpu" 2 117 "void()" `92 
f B "sleep" 2 118 "void()" `93 
v L "type" 2 119 "int8" `95 
f G "sleep" 2 119 "void(int8 type)" `94  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 121 "7"
d G "MCLR_FROM_SLEEP" 2 122 "11"
d G "MCLR_FROM_RUN" 2 123 "15"
d G "NORMAL_POWER_UP" 2 124 "12"
d G "BROWNOUT_RESTART" 2 125 "14"
d G "WDT_FROM_SLEEP" 2 126 "3"
d G "RESET_INSTRUCTION" 2 127 "0"
d G "POR_FROM_DS" 2 129 "0x0100"
d G "MCLR_FROM_DS" 2 130 "0x0400"
d G "RTC_FROM_DS" 2 131 "0x0800"
d G "DSWDT_FROM_DS" 2 132 "0x1000"
d G "ULPWU_FROM_DS" 2 133 "0x2000"
d G "FAULT_FROM_DS" 2 134 "0x8000"
d G "EXT_FROM_DS" 2 135 "0x0200"
d G "DEEP_SLEEP" 2 138 "3"
d G "WAKE_FROM_RTCC" 2 140 "4" "Wake-up from RTCC is enabled"
d G "WAKE_FROM_ULP" 2 141 "8" "ULPWU module is enabled in Deep Sleep"
d G "REG_LOW_POWER" 2 147 "2"
d G "REG_NORMAL" 2 148 "0" "default"
d G "SLEEP_FULL" 2 151 "0" "Default"
d G "SLEEP_IDLE" 2 152 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 159 "int8" `99 
f B "setup_timer_0" 2 159 "void(int8 mode)" `98 
v L "value" 2 160 "int16" `101 
f B "set_timer0" 2 160 "void(int16 value)" `100 
f B "get_timer0" 2 161 "int16()" `102 
v L "mode" 2 162 "int8" `104 
v L "prescaler" 2 162 "int8" `105 
f B "setup_counters" 2 162 "void(int8 mode,int8 prescaler)" `103 
v L "value" 2 163 "int16" `107 
f B "set_rtcc" 2 163 "void(int16 value)" `106 
f B "get_rtcc" 2 164 "int16()" `108  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 166 "0"
d G "T0_EXT_L_TO_H" 2 167 "32"
d G "T0_EXT_H_TO_L" 2 168 "48"
d G "T0_DIV_1" 2 170 "8"
d G "T0_DIV_2" 2 171 "0"
d G "T0_DIV_4" 2 172 "1"
d G "T0_DIV_8" 2 173 "2"
d G "T0_DIV_16" 2 174 "3"
d G "T0_DIV_32" 2 175 "4"
d G "T0_DIV_64" 2 176 "5"
d G "T0_DIV_128" 2 177 "6"
d G "T0_DIV_256" 2 178 "7"
d G "T0_OFF" 2 180 "0x80"
d G "T0_8_BIT" 2 182 "0x40"
d G "RTCC_INTERNAL" 2 184 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 185 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 186 "48"
d G "RTCC_DIV_1" 2 187 "8"
d G "RTCC_DIV_2" 2 188 "0"
d G "RTCC_DIV_4" 2 189 "1"
d G "RTCC_DIV_8" 2 190 "2"
d G "RTCC_DIV_16" 2 191 "3"
d G "RTCC_DIV_32" 2 192 "4"
d G "RTCC_DIV_64" 2 193 "5"
d G "RTCC_DIV_128" 2 194 "6"
d G "RTCC_DIV_256" 2 195 "7"
d G "RTCC_OFF" 2 196 "0x80"
d G "RTCC_8_BIT" 2 197 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 208 "int16" `110 
f B "setup_wdt" 2 208 "void(int16 mode)" `109 
f B "restart_wdt" 2 209 "void()" `111  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 211 "0x100"
d G "WDT_OFF" 2 212 "0"
d G "WDT_4MS" 2 214 "0x300"
d G "WDT_8MS" 2 215 "0x500"
d G "WDT_16MS" 2 216 "0x700"
d G "WDT_32MS" 2 217 "0x900"
d G "WDT_64MS" 2 218 "0xB00"
d G "WDT_128MS" 2 219 "0xD00"
d G "WDT_256MS" 2 220 "0xF00"
d G "WDT_512MS" 2 221 "0x1100"
d G "WDT_1S" 2 222 "0x1300"
d G "WDT_2S" 2 223 "0x1500"
d G "WDT_4S" 2 224 "0x1700"
d G "WDT_8S" 2 225 "0x1900"
d G "WDT_16" 2 226 "0x1B00"
d G "WDT_32S" 2 227 "0x1D00"
d G "WDT_64S" 2 228 "0x1F00"
d G "WDT_128S" 2 229 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 234 "int16" `113 
f B "setup_timer_1" 2 234 "void(int16 mode)" `112 
f B "get_timer1" 2 235 "int16()" `114 
v L "value" 2 236 "int16" `116 
f B "set_timer1" 2 236 "void(int16 value)" `115  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 239 "0"
d G "T1_INTERNAL" 2 240 "0x07"
d G "T1_EXTERNAL" 2 241 "0x87"
d G "T1_EXTERNAL_SYNC" 2 242 "0x83"
d G "T1_FOSC" 2 243 "0x47"
d G "T1_ENABLE_T1OSC" 2 245 "0x08"
d G "T1_DIV_BY_1" 2 247 "0"
d G "T1_DIV_BY_2" 2 248 "0x10"
d G "T1_DIV_BY_4" 2 249 "0x20"
d G "T1_DIV_BY_8" 2 250 "0x30"
d G "T1_GATE" 2 252 "0x8000"
d G "T1_GATE_INVERTED" 2 253 "0xC000"
d G "T1_GATE_TOGGLE" 2 254 "0xA000"
d G "T1_GATE_SINGLE" 2 255 "0x9000"
d G "T1_GATE_TIMER0" 2 256 "0x8100"
d G "T1_GATE_TIMER2" 2 257 "0x8200"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 262 "int8" `118 
v L "period" 2 262 "int8" `119 
v L "postscale" 2 262 "int8" `120 
f B "setup_timer_2" 2 262 "void(int8 mode,int8 period,int8 postscale)" `117 
f B "get_timer2" 2 263 "int8()" `121 
v L "value" 2 264 "int8" `123 
f B "set_timer2" 2 264 "void(int8 value)" `122  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 266 "0"
d G "T2_DIV_BY_1" 2 267 "4"
d G "T2_DIV_BY_4" 2 268 "5"
d G "T2_DIV_BY_16" 2 269 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 274 "int16" `125 
f B "setup_timer_3" 2 274 "void(int16 mode)" `124 
f B "get_timer3" 2 275 "int16()" `126 
v L "value" 2 276 "int16" `128 
f B "set_timer3" 2 276 "void(int16 value)" `127  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 279 "0"
d G "T3_INTERNAL" 2 280 "0x07"
d G "T3_INTERNAL_TIMES_4" 2 281 "0x47"
d G "T3_EXTERNAL" 2 282 "0x87"
d G "T3_EXTERNAL_SYNC" 2 283 "0x83"
d G "T3_DIV_BY_1" 2 286 "0"
d G "T3_DIV_BY_2" 2 287 "0x10"
d G "T3_DIV_BY_4" 2 288 "0x20"
d G "T3_DIV_BY_8" 2 289 "0x30"
d G "T3_GATE" 2 291 "0x8000"
d G "T3_GATE_INVERTED" 2 292 "0xC000"
d G "T3_GATE_TOGGLE" 2 293 "0xA000"
d G "T3_GATE_SINGLE" 2 294 "0x9000"
d G "T3_GATE_TIMER0" 2 295 "0x8100"
d G "T3_GATE_TIMER2" 2 296 "0x8200"
c L "set_timer3" 2 3 3 "FUNCTION"
v L "mode" 2 301 "int16" `130 
v L "period" 2 301 "int8" `131 
v L "postscaler" 2 301 "int8" `132 
f B "setup_timer_4" 2 301 "void(int16 mode,int8 period,int8 postscaler)" `129 
f B "get_timer4" 2 302 "int8()" `133 
v L "value" 2 303 "int8" `135 
f B "set_timer4" 2 303 "void(int8 value)" `134  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 305 "0"
d G "T4_DIV_BY_1" 2 306 "4"
d G "T4_DIV_BY_4" 2 307 "5"
d G "T4_DIV_BY_16" 2 308 "6"
c L "set_timer4" 2 3 4 "FUNCTION"
c L "set_timer4" 2 3 1 "FUNCTION"
c L "set_timer4" 2 3 1 "FUNCTION"
t G "rtc_time_t" 2 324 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `146  "RTC Prototypes:"
v L "mode" 2 326 "int32" `148 
f B "setup_rtc" 2 326 "void(int32 mode)" `147 
v L "mode" 2 327 "int32" `150 
v L "calibration" 2 327 "int8" `151 
f G "setup_rtc" 2 327 "void(int32 mode,int8 calibration)" `149 
v L "mode" 2 328 "int8" `153 
v L "mask" 2 328 "int8" `154 
v L "repeat" 2 328 "int8" `155 
f B "setup_rtc_alarm" 2 328 "void(int8 mode,int8 mask,int8 repeat)" `152 
v L "time" 2 329 "*rtc_time_t" `157 
f B "rtc_read" 2 329 "void(*rtc_time_t time)" `156 
v L "time" 2 330 "*rtc_time_t" `159 
f B "rtc_write" 2 330 "void(*rtc_time_t time)" `158 
v L "time" 2 331 "*rtc_time_t" `161 
f B "rtc_alarm_read" 2 331 "void(*rtc_time_t time)" `160 
v L "time" 2 332 "*rtc_time_t" `163 
f B "rtc_alarm_write" 2 332 "void(*rtc_time_t time)" `162  "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 2 334 "0x8000"
d G "RTC_DISABLE" 2 335 "0"
d G "RTC_OUTPUT_SOURCE" 2 336 "0x20400"
d G "RTC_OUTPUT_SECONDS" 2 337 "0x10400"
d G "RTC_OUTPUT_ALARM" 2 338 "0x00400"
d G "RTC_ALARM_ENABLE" 2 341 "0x80"
d G "RTC_ALARM_DISABLE" 2 342 "0"
d G "RTC_CHIME_ENABLE" 2 343 "0x40"
d G "RTC_CHIME_DISABLE" 2 344 "0"
d G "RTC_ALARM_HALFSECOND" 2 346 "0x00"
d G "RTC_ALARM_SECOND" 2 347 "0x04"
d G "RTC_ALARM_10_SECONDS" 2 348 "0x08"
d G "RTC_ALARM_MINUTE" 2 349 "0x0C"
d G "RTC_ALARM_10_MINUTES" 2 350 "0x10"
d G "RTC_ALARM_HOUR" 2 351 "0x14"
d G "RTC_ALARM_DAY" 2 352 "0x18"
d G "RTC_ALARM_WEEK" 2 353 "0x1C"
d G "RTC_ALARM_MONTH" 2 354 "0x20"
d G "RTC_ALARM_YEAR" 2 355 "0x24"
c L "rtc_alarm_write" 2 3 4 "FUNCTION"
v L "mode" 2 361 "int32" `165 
f B "setup_ccp1" 2 361 "void(int32 mode)" `164 
v L "mode" 2 362 "int32" `167 
v L "pwm" 2 362 "int8" `168 
f G "setup_ccp1" 2 362 "void(int32 mode,int8 pwm)" `166 
v L "value" 2 363 "int16" `170 
f B "set_pwm1_duty" 2 363 "void(int16 value)" `169  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 365 "0"
d G "CCP_CAPTURE_FE" 2 366 "0x04"
d G "CCP_CAPTURE_RE" 2 367 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 368 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 369 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 370 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 371 "0x09"
d G "CCP_COMPARE_INT" 2 372 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 373 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 374 "0x0B"
d G "CCP_PWM" 2 375 "0x0C"
d G "CCP_PWM_PLUS_1" 2 376 "0x1c"
d G "CCP_PWM_PLUS_2" 2 377 "0x2c"
d G "CCP_PWM_PLUS_3" 2 378 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 385 "0x0200"
d G "T3_CCP1" 2 386 "0x0100"
d G "CCP_PWM_H_H" 2 389 "0x0c"
d G "CCP_PWM_H_L" 2 390 "0x0d"
d G "CCP_PWM_L_H" 2 391 "0x0e"
d G "CCP_PWM_L_L" 2 392 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 394 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 395 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 396 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 398 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 399 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 400 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 401 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 402 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 403 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 404 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 406 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 407 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 408 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 410 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 411 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 412 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 414 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 416 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 417 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 418 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 419 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 420 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 424 "int32" `175 
f B "setup_ccp2" 2 424 "void(int32 mode)" `174 
v L "mode" 2 425 "int32" `177 
v L "pwm" 2 425 "int8" `178 
f G "setup_ccp2" 2 425 "void(int32 mode,int8 pwm)" `176 
v L "value" 2 426 "int16" `180 
f B "set_pwm2_duty" 2 426 "void(int16 value)" `179 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 433 "int32" `185 
f B "setup_spi" 2 433 "void(int32 mode)" `184 
v L "value" 2 434 "int8" `187 
f B "spi_write" 2 434 "void(int8 value)" `186 
f B "spi_read" 2 435 "int8()" `188 
v L "value" 2 436 "int8" `190 
f G "spi_read" 2 436 "int8(int8 value)" `189 
f B "spi_data_in" 2 437 "int8()" `191 
v L "mode" 2 438 "int32" `193 
f B "setup_spi2" 2 438 "void(int32 mode)" `192 
v L "value" 2 439 "int8" `195 
f B "spi_write2" 2 439 "void(int8 value)" `194 
f B "spi_read2" 2 440 "int8()" `196 
v L "value" 2 441 "int8" `198 
f G "spi_read2" 2 441 "int8(int8 value)" `197 
f B "spi_data_in2" 2 442 "int8()" `199  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 444 "0x00"
d G "SPI_MASTER" 2 445 "0x20"
d G "SPI_SLAVE" 2 446 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 447 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 448 "0x00"
d G "SPI_CLK_DIV_4" 2 449 "0x00"
d G "SPI_CLK_DIV_16" 2 450 "0x01"
d G "SPI_CLK_DIV_64" 2 451 "0x02"
d G "SPI_CLK_T2" 2 452 "0x03"
d G "SPI_SS_DISABLED" 2 453 "0x01"
d G "SPI_XMIT_L_TO_H" 2 455 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 456 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 458 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 459 "0x8000"
d G "SPI_L_TO_H" 2 462 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 463 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 467 "int32" `201 
f B "setup_uart" 2 467 "void(int32 baud)" `200 
v L "baud" 2 468 "int32" `203 
v L "stream" 2 468 "int8" `204 
f G "setup_uart" 2 468 "void(int32 baud,int8 stream)" `202 
v L "baud" 2 469 "int32" `206 
v L "stream" 2 469 "int8" `207 
v L "clock" 2 469 "int32" `208 
f G "setup_uart" 2 469 "void(int32 baud,int8 stream,int32 clock)" `205 
v L "baud" 2 470 "int32" `210 
f B "set_uart_speed" 2 470 "void(int32 baud)" `209 
v L "baud" 2 471 "int32" `212 
v L "stream" 2 471 "int8" `213 
f G "set_uart_speed" 2 471 "void(int32 baud,int8 stream)" `211 
v L "baud" 2 472 "int32" `215 
v L "stream" 2 472 "int8" `216 
v L "clock" 2 472 "int32" `217 
f G "set_uart_speed" 2 472 "void(int32 baud,int8 stream,int32 clock)" `214  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 476 "2"
d G "UART_DATA" 2 477 "4"
d G "UART_AUTODETECT" 2 478 "8"
d G "UART_AUTODETECT_NOWAIT" 2 479 "9"
d G "UART_WAKEUP_ON_RDA" 2 480 "10"
d G "UART_SEND_BREAK" 2 481 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 485 "int32" `219 
f B "setup_comparator" 2 485 "void(int32 mode)" `218  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 488 "0x00"
d G "NC_NC" 2 489 "0x00"
d G "CP1_VREF_F6" 2 492 "0x83"
d G "CP1_F5_F6" 2 493 "0x80"
d G "CP1_VREF_VREF" 2 494 "0x87"
d G "CP1_F5_VREF" 2 495 "0x84"
d G "CP1_OUT_ON_F2" 2 497 "0x40"
d G "CP1_INVERT" 2 498 "0x20"
d G "CP1_INT_H_TO_L" 2 499 "0x10"
d G "CP1_INT_L_TO_H" 2 500 "0x08"
d G "CP2_VREF_F4" 2 503 "0x8300"
d G "CP2_F3_F4" 2 504 "0x8000"
d G "CP2_VREF_VREF" 2 505 "0x8700"
d G "CP2_F3_VREF" 2 506 "0x8400"
d G "CP2_OUT_ON_F1" 2 508 "0x4000"
d G "CP2_INVERT" 2 509 "0x2000"
d G "CP2_INT_H_TO_L" 2 510 "0x1000"
d G "CP2_INT_L_TO_H" 2 511 "0x0800"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 518 "int8" `223 
f B "setup_vref" 2 518 "void(int8 mode)" `222  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 520 "0"
d G "VREF_LOW" 2 521 "0xA0"
d G "VREF_HIGH" 2 522 "0x80"
d G "VREF_EXT" 2 523 "0x10" "Range for ref gen VREF- to VREF+"
d G "VREF_OUT_A2" 2 524 "0x40"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 529 "int8" `225 
f B "setup_low_volt_detect" 2 529 "void(int8 mode)" `224  "CONSTANTS USED IN SETUP_LOW_VOLT_DETECT() ARE"
d G "LVD_LVDIN" 2 531 "0x1F"
d G "LVD_34" 2 532 "0x1E"
d G "LVD_31" 2 533 "0x1D"
d G "LVD_30" 2 534 "0x1C"
d G "LVD_29" 2 535 "0x1B"
d G "LVD_28" 2 536 "0x1A"
d G "LVD_26" 2 537 "0x19"
d G "LVD_24" 2 538 "0x18"
d G "LVD_TRIGGER_BELOW" 2 540 "0"
d G "LVD_TRIGGER_ABOVE" 2 541 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
v L "mode" 2 546 "int16" `227 
f B "setup_oscillator" 2 546 "int8(int16 mode)" `226 
v L "mode" 2 547 "int16" `229 
v L "tune" 2 547 "sint8" `230 
f G "setup_oscillator" 2 547 "int8(int16 mode,sint8 tune)" `228  "Constants used in setup_oscillator() are:"
d G "OSC_31250" 2 549 "0x8000"
d G "OSC_PLL_ON" 2 550 "0x4000"
d G "OSC_PLL_OFF" 2 551 "0"
d G "OSC_31KHZ" 2 552 "0"
d G "OSC_125KHZ" 2 553 "0x10"
d G "OSC_250KHZ" 2 554 "0x20"
d G "OSC_500KHZ" 2 555 "0x30"
d G "OSC_1MHZ" 2 556 "0x40"
d G "OSC_2MHZ" 2 557 "0x50"
d G "OSC_4MHZ" 2 558 "0x60"
d G "OSC_8MHZ" 2 559 "0x70"
d G "OSC_TIMER1" 2 561 "1"
d G "OSC_INTRC" 2 562 "3"
d G "OSC_NORMAL" 2 563 "0"
d G "OSC_IDLE_MODE" 2 565 "0x80"
d G "OSC_STATE_STABLE" 2 569 "4"
d G "OSC_STATE_EXT_RUNNING" 2 570 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 577 "int16" `232 
f B "setup_adc" 2 577 "void(int16 mode)" `231 
f B "read_adc" 2 578 "int8()" `233 
v L "mode" 2 579 "int8" `235 
f G "read_adc" 2 579 "int8(int8 mode)" `234 
f G "read_adc" 2 580 "int16()" `236 
v L "mode" 2 581 "int8" `238 
f G "read_adc" 2 581 "int16(int8 mode)" `237 
f B "adc_done" 2 582 "int8()" `239  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 584 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 585 "0x100"
d G "ADC_CLOCK_DIV_4" 2 586 "0x04"
d G "ADC_CLOCK_DIV_8" 2 587 "0x01"
d G "ADC_CLOCK_DIV_16" 2 588 "0x05"
d G "ADC_CLOCK_DIV_32" 2 589 "0x02"
d G "ADC_CLOCK_DIV_64" 2 590 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 591 "0x03" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 593 "0x00"
d G "ADC_TAD_MUL_2" 2 594 "0x08"
d G "ADC_TAD_MUL_4" 2 595 "0x10"
d G "ADC_TAD_MUL_6" 2 596 "0x18"
d G "ADC_TAD_MUL_8" 2 597 "0x20"
d G "ADC_TAD_MUL_12" 2 598 "0x28"
d G "ADC_TAD_MUL_16" 2 599 "0x30"
d G "ADC_TAD_MUL_20" 2 600 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 603 "int32" `241 
f B "setup_adc_ports" 2 603 "void(int32 pins)" `240 
v L "pins" 2 604 "int32" `243 
v L "reference" 2 604 "int32" `244 
f G "setup_adc_ports" 2 604 "void(int32 pins,int32 reference)" `242 
v L "channel" 2 605 "int8" `246 
f B "set_adc_channel" 2 605 "void(int8 channel)" `245  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN12" 2 609 "0x10" "| B0"
d G "sAN11" 2 610 "0x8" "| C2"
d G "sAN10" 2 611 "0x4" "| B1"
d G "sAN9" 2 612 "0x2" "| B3"
d G "sAN8" 2 613 "0x1" "| B2"
d G "sAN4" 2 614 "0x100000" "| A5"
d G "sAN3" 2 615 "0x80000" "| A3"
d G "sAN2" 2 616 "0x40000" "| A2"
d G "sAN1" 2 617 "0x20000" "| A1"
d G "sAN0" 2 618 "0x10000" "| A0"
d G "NO_ANALOGS" 2 619 "0x0" "None"
d G "ALL_ANALOG" 2 620 "0xff00ff" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 C2 B0"
d G "VSS_VDD" 2 623 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 624 "0x4000" "| Range 0-Vref"
d G "VREF_VREF" 2 625 "0xc000" "| Range Vref-Vref"
d G "VREF_VDD" 2 626 "0x8000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 629 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 630 "1"
d G "ADC_READ_ONLY" 2 631 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 637 "sint8" `248 
f B "abs" 2 637 "sint8(sint8 x)" `247 
v L "x" 2 638 "sint16" `250 
f G "abs" 2 638 "sint16(sint16 x)" `249 
v L "x" 2 639 "sint32" `252 
f G "abs" 2 639 "sint32(sint32 x)" `251 
v L "x" 2 640 "float" `254 
f G "abs" 2 640 "float(float x)" `253 
v L "??65535" 2 641 "int8" `256 
v L "??65535" 2 641 "int8" `257 
f B "_mul" 2 641 "int16(int8 ,int8 )" `255 
v L "??65535" 2 642 "sint8" `256 
v L "??65535" 2 642 "sint8" `260 
f G "_mul" 2 642 "sint16(sint8 ,sint8 )" `258 
v L "??65535" 2 643 "int16" `256 
v L "??65535" 2 643 "int16" `263 
f G "_mul" 2 643 "int32(int16 ,int16 )" `261 
v L "??65535" 2 644 "sint16" `256 
v L "??65535" 2 644 "sint16" `266 
f G "_mul" 2 644 "sint32(sint16 ,sint16 )" `264  "Memory Manipulation Prototypes:"
v L "bank" 2 647 "int8" `268 
v L "offset" 2 647 "int8" `269 
f B "read_bank" 2 647 "int8(int8 bank,int8 offset)" `267 
v L "bank" 2 648 "int8" `271 
v L "offset" 2 648 "int8" `272 
v L "value" 2 648 "int8" `273 
f B "write_bank" 2 648 "void(int8 bank,int8 offset,int8 value)" `270 
v L "dest" 2 649 "*int8" `275 
v L "src" 2 649 "*int8" `276 
f B "strcpy" 2 649 "void(*int8 dest,*int8 src)" `274 
v L "dest" 2 650 "*int8" `278 
v L "src" 2 650 "*int8" `279 
f B "strcopy" 2 650 "void(*int8 dest,*int8 src)" `277 
v L "destination" 2 651 "*int8" `281 
v L "value" 2 651 "int8" `282 
v L "num" 2 651 "int16" `283 
f B "memset" 2 651 "void(*int8 destination,int8 value,int16 num)" `280 
v L "destination" 2 652 "*int8" `285 
v L "source" 2 652 "*int8" `286 
v L "num" 2 652 "int16" `287 
f B "memcpy" 2 652 "void(*int8 destination,*int8 source,int16 num)" `284  "String Prototypes:"
v L "cvalue" 2 655 "int8" `289 
f B "toupper" 2 655 "int8(int8 cvalue)" `288 
v L "cvalue" 2 656 "int8" `291 
f B "tolower" 2 656 "int8(int8 cvalue)" `290 
v L "string" 2 657 "*int8" `293 
v L "cstring" 2 657 "*int8" `294 
f B "sprintf" 2 657 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `292  "Data Manipulators Prototypes:"
v L "address" 2 660 "*int8" `297 
v L "bytes" 2 660 "int8" `298 
v L "value" 2 660 "int8" `299 
f B "shift_left" 2 660 "int8(*int8 address,int8 bytes,int8 value)" `296 
v L "address" 2 661 "*int8" `301 
v L "bytes" 2 661 "int8" `302 
v L "value" 2 661 "int8" `303 
f B "shift_right" 2 661 "int8(*int8 address,int8 bytes,int8 value)" `300 
v L "address" 2 662 "*int8" `305 
v L "bytes" 2 662 "int8" `306 
f B "rotate_left" 2 662 "void(*int8 address,int8 bytes)" `304 
v L "address" 2 663 "*int8" `308 
v L "bytes" 2 663 "int8" `309 
f B "rotate_right" 2 663 "void(*int8 address,int8 bytes)" `307 
v L "value" 2 664 "int8" `311 
f B "swap" 2 664 "void(int8 value)" `310 
v L "var" 2 665 "int16" `313 
v L "offset" 2 665 "int8" `314 
f B "make8" 2 665 "int8(int16 var,int8 offset)" `312 
v L "var" 2 666 "int32" `313 
v L "offset" 2 666 "int8" `317 
f G "make8" 2 666 "int8(int32 var,int8 offset)" `315 
v L "varhigh" 2 667 "int8" `319 
v L "varlow" 2 667 "int8" `320 
f B "make16" 2 667 "int16(int8 varhigh,int8 varlow)" `318 
v L "var1" 2 668 "int16" `322 
f B "make32" 2 668 "int32(int16 var1)" `321 
v L "var1" 2 669 "int16" `324 
v L "var2" 2 669 "int16" `325 
f G "make32" 2 669 "int32(int16 var1,int16 var2)" `323 
v L "var1" 2 670 "int16" `324 
v L "var2" 2 670 "int8" `328 
f G "make32" 2 670 "int32(int16 var1,int8 var2)" `326 
v L "var1" 2 671 "int16" `330 
v L "var2" 2 671 "int8" `331 
v L "var3" 2 671 "int8" `332 
f G "make32" 2 671 "int32(int16 var1,int8 var2,int8 var3)" `329 
v L "var1" 2 672 "int8" `334 
f G "make32" 2 672 "int32(int8 var1)" `333 
v L "var1" 2 673 "int8" `324 
v L "var2" 2 673 "int8" `337 
f G "make32" 2 673 "int32(int8 var1,int8 var2)" `335 
v L "var1" 2 674 "int8" `330 
v L "var2" 2 674 "int8" `331 
v L "var3" 2 674 "int8" `341 
f G "make32" 2 674 "int32(int8 var1,int8 var2,int8 var3)" `338 
v L "var1" 2 675 "int8" `343 
v L "var2" 2 675 "int8" `344 
v L "var3" 2 675 "int8" `345 
v L "var4" 2 675 "int8" `346 
f G "make32" 2 675 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `342 
v L "var1" 2 676 "int8" `324 
v L "var2" 2 676 "int16" `349 
f G "make32" 2 676 "int32(int8 var1,int16 var2)" `347 
v L "var1" 2 677 "int8" `330 
v L "var2" 2 677 "int16" `331 
v L "var3" 2 677 "int8" `353 
f G "make32" 2 677 "int32(int8 var1,int16 var2,int8 var3)" `350 
v L "var1" 2 678 "int8" `330 
v L "var2" 2 678 "int8" `331 
v L "var3" 2 678 "int16" `357 
f G "make32" 2 678 "int32(int8 var1,int8 var2,int16 var3)" `354 
v L "var" 2 679 "int8" `359 
v L "bit" 2 679 "int8" `360 
f B "bit_set" 2 679 "void(int8 var,int8 bit)" `358 
v L "var" 2 680 "int16" `359 
v L "bit" 2 680 "int8" `363 
f G "bit_set" 2 680 "void(int16 var,int8 bit)" `361 
v L "var" 2 681 "int32" `359 
v L "bit" 2 681 "int8" `366 
f G "bit_set" 2 681 "void(int32 var,int8 bit)" `364 
v L "var" 2 682 "int8" `368 
v L "bit" 2 682 "int8" `369 
f B "bit_clear" 2 682 "void(int8 var,int8 bit)" `367 
v L "var" 2 683 "int16" `368 
v L "bit" 2 683 "int8" `372 
f G "bit_clear" 2 683 "void(int16 var,int8 bit)" `370 
v L "var" 2 684 "int32" `368 
v L "bit" 2 684 "int8" `375 
f G "bit_clear" 2 684 "void(int32 var,int8 bit)" `373 
v L "var" 2 685 "int8" `377 
v L "bit" 2 685 "int8" `378 
f B "bit_test" 2 685 "int8(int8 var,int8 bit)" `376 
v L "var" 2 686 "int16" `377 
v L "bit" 2 686 "int8" `381 
f G "bit_test" 2 686 "int8(int16 var,int8 bit)" `379 
v L "var" 2 687 "int32" `377 
v L "bit" 2 687 "int8" `384 
f G "bit_test" 2 687 "int8(int32 var,int8 bit)" `382  "#use delay() Prototypes:"
v L "count" 2 690 "int8" `386 
f B "delay_cycles" 2 690 "void(int8 count)" `385 
v L "time" 2 691 "int16" `388 
f B "delay_ms" 2 691 "void(int16 time)" `387 
v L "time" 2 692 "int16" `390 
f B "delay_us" 2 692 "void(int16 time)" `389  "#use rs232() Prototypes:"
v L "cdata" 2 695 "int8" `392 
f B "putchar" 2 695 "void(int8 cdata)" `391 
v L "cdata" 2 696 "int8" `394 
v L "stream" 2 696 "int8" `395 
f G "putchar" 2 696 "void(int8 cdata,int8 stream)" `393 
v L "string" 2 697 "*int8" `397 
f B "puts" 2 697 "void(*int8 string)" `396 
v L "string" 2 698 "*int8" `399 
v L "stream" 2 698 "int8" `400 
f G "puts" 2 698 "void(*int8 string,int8 stream)" `398 
f B "getch" 2 699 "int8()" `401 
v L "stream" 2 700 "int8" `403 
f G "getch" 2 700 "int8(int8 stream)" `402 
v L "string" 2 701 "*int8" `405 
f B "gets" 2 701 "void(*int8 string)" `404 
v L "string" 2 702 "*int8" `407 
v L "stream" 2 702 "int8" `408 
f G "gets" 2 702 "void(*int8 string,int8 stream)" `406 
f B "kbhit" 2 703 "int8()" `409 
v L "stream" 2 704 "int8" `411 
f G "kbhit" 2 704 "int8(int8 stream)" `410 
v L "string" 2 705 "*int8" `413 
f B "printf" 2 705 "void(*int8 string,*int8 _VA_LIST)" `412 
v L "stream" 2 706 "int8" `416 
v L "string" 2 706 "*int8" `417 
f B "fprintf" 2 706 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `415 
f B "putc_send" 2 707 "void()" `419 
v L "stream" 2 708 "int8" `421 
f B "fputc_send" 2 708 "void(int8 stream)" `420 
f B "rcv_buffer_full" 2 709 "int8()" `422 
v L "stream" 2 710 "int8" `424 
f G "rcv_buffer_full" 2 710 "int8(int8 stream)" `423 
f B "rcv_buffer_bytes" 2 711 "int16()" `425 
v L "stream" 2 712 "int8" `427 
f G "rcv_buffer_bytes" 2 712 "int16(int8 stream)" `426 
f B "tx_buffer_full" 2 713 "int8()" `428 
v L "stream" 2 714 "int8" `430 
f G "tx_buffer_full" 2 714 "int8(int8 stream)" `429 
f B "tx_buffer_bytes" 2 715 "int16()" `431 
v L "stream" 2 716 "int8" `433 
f G "tx_buffer_bytes" 2 716 "int16(int8 stream)" `432  "#use i2c() Prototypes:"
f B "i2c_read" 2 719 "int8()" `434 
v L "stream" 2 720 "int8" `436 
f G "i2c_read" 2 720 "int8(int8 stream)" `435 
v L "stream" 2 721 "int8" `438 
v L "ack" 2 721 "int8" `439 
f G "i2c_read" 2 721 "int8(int8 stream,int8 ack)" `437 
v L "data" 2 722 "int8" `441 
f B "i2c_write" 2 722 "int8(int8 data)" `440 
v L "stream" 2 723 "int8" `443 
v L "data" 2 723 "int8" `444 
f G "i2c_write" 2 723 "int8(int8 stream,int8 data)" `442 
f B "i2c_start" 2 724 "void()" `445 
v L "stream" 2 725 "int8" `447 
f G "i2c_start" 2 725 "void(int8 stream)" `446 
v L "stream" 2 726 "int8" `449 
v L "restart" 2 726 "int8" `450 
f G "i2c_start" 2 726 "void(int8 stream,int8 restart)" `448 
f B "i2c_stop" 2 727 "void()" `451 
v L "stream" 2 728 "int8" `453 
f G "i2c_stop" 2 728 "void(int8 stream)" `452 
f B "i2c_isr_state" 2 729 "int8()" `454 
v L "addr" 2 730 "int8" `456 
f B "i2c_slaveaddr" 2 730 "void(int8 addr)" `455 
v L "stream" 2 731 "int8" `458 
v L "addr" 2 731 "int8" `459 
f G "i2c_slaveaddr" 2 731 "void(int8 stream,int8 addr)" `457 
f B "i2c_poll" 2 732 "int8()" `460 
v L "stream" 2 733 "int8" `462 
f G "i2c_poll" 2 733 "int8(int8 stream)" `461 
v L "baud" 2 734 "int32" `464 
f B "i2c_init" 2 734 "void(int32 baud)" `463 
v L "stream" 2 735 "int8" `466 
v L "baud" 2 735 "int32" `467 
f G "i2c_init" 2 735 "void(int8 stream,int32 baud)" `465  "#use spi() Prototypes:"
f B "spi_xfer" 2 738 "int8()" `468 
f G "spi_xfer" 2 739 "int16()" `469 
f G "spi_xfer" 2 740 "int32()" `470 
v L "data" 2 741 "int8" `472 
f G "spi_xfer" 2 741 "int8(int8 data)" `471 
v L "data" 2 742 "int16" `474 
f G "spi_xfer" 2 742 "int16(int16 data)" `473 
v L "data" 2 743 "int32" `476 
f G "spi_xfer" 2 743 "int32(int32 data)" `475 
v L "stream" 2 744 "int8" `478 
v L "data" 2 744 "int8" `479 
f G "spi_xfer" 2 744 "int8(int8 stream,int8 data)" `477 
v L "stream" 2 745 "int8" `478 
v L "data" 2 745 "int16" `482 
f G "spi_xfer" 2 745 "int16(int8 stream,int16 data)" `480 
v L "stream" 2 746 "int8" `478 
v L "data" 2 746 "int32" `485 
f G "spi_xfer" 2 746 "int32(int8 stream,int32 data)" `483 
v L "stream" 2 747 "int8" `487 
v L "data" 2 747 "int8" `488 
v L "bits" 2 747 "int8" `489 
f G "spi_xfer" 2 747 "int8(int8 stream,int8 data,int8 bits)" `486 
v L "stream" 2 748 "int8" `487 
v L "data" 2 748 "int16" `488 
v L "bits" 2 748 "int8" `493 
f G "spi_xfer" 2 748 "int16(int8 stream,int16 data,int8 bits)" `490 
v L "stream" 2 749 "int8" `487 
v L "data" 2 749 "int32" `488 
v L "bits" 2 749 "int8" `497 
f G "spi_xfer" 2 749 "int32(int8 stream,int32 data,int8 bits)" `494 
v L "baud" 2 750 "int32" `499 
f B "spi_init" 2 750 "void(int32 baud)" `498 
v L "stream" 2 751 "int8" `501 
v L "baud" 2 751 "int32" `502 
f G "spi_init" 2 751 "void(int8 stream,int32 baud)" `500 
v L "baud" 2 752 "int32" `504 
f B "spi_speed" 2 752 "void(int32 baud)" `503 
v L "stream" 2 753 "int8" `506 
v L "baud" 2 753 "int32" `507 
f G "spi_speed" 2 753 "void(int8 stream,int32 baud)" `505 
v L "stream" 2 754 "int8" `509 
v L "baud" 2 754 "int32" `510 
v L "clock" 2 754 "int32" `511 
f G "spi_speed" 2 754 "void(int8 stream,int32 baud,int32 clock)" `508 
v L "data" 2 755 "int8" `513 
f B "spi_prewrite" 2 755 "void(int8 data)" `512 
v L "data" 2 756 "int16" `515 
f G "spi_prewrite" 2 756 "void(int16 data)" `514 
v L "data" 2 757 "int32" `517 
f G "spi_prewrite" 2 757 "void(int32 data)" `516 
v L "??65535" 2 758 "int8" `519 
v L "data" 2 758 "int8" `520 
f G "spi_prewrite" 2 758 "void(int8 ,int8 data)" `518 
v L "??65535" 2 759 "int8" `519 
v L "data" 2 759 "int16" `523 
f G "spi_prewrite" 2 759 "void(int8 ,int16 data)" `521 
v L "??65535" 2 760 "int8" `519 
v L "data" 2 760 "int32" `526 
f G "spi_prewrite" 2 760 "void(int8 ,int32 data)" `524 
f B "spi_xfer_in" 2 761 "int8()" `527 
f G "spi_xfer_in" 2 762 "int16()" `528 
f G "spi_xfer_in" 2 763 "int32()" `529 
v L "bits" 2 764 "int8" `531 
f G "spi_xfer_in" 2 764 "int8(int8 bits)" `530 
v L "bits" 2 765 "int8" `533 
f G "spi_xfer_in" 2 765 "int16(int8 bits)" `532 
v L "bits" 2 766 "int8" `535 
f G "spi_xfer_in" 2 766 "int32(int8 bits)" `534 
v L "stream" 2 767 "int8" `537 
v L "bits" 2 767 "int8" `538 
f G "spi_xfer_in" 2 767 "int8(int8 stream,int8 bits)" `536 
v L "stream" 2 768 "int8" `537 
v L "bits" 2 768 "int8" `541 
f G "spi_xfer_in" 2 768 "int16(int8 stream,int8 bits)" `539 
v L "stream" 2 769 "int8" `537 
v L "bits" 2 769 "int8" `544 
f G "spi_xfer_in" 2 769 "int32(int8 stream,int8 bits)" `542  "#use rtos() Prototypes:"
f B "rtos_run" 2 772 "void()" `545 
f B "rtos_yield" 2 773 "void()" `546 
v L "task" 2 774 "int8" `548 
f B "rtos_enable" 2 774 "void(int8 task)" `547 
v L "task" 2 775 "int8" `550 
f B "rtos_disable" 2 775 "void(int8 task)" `549 
f B "rtos_terminate" 2 776 "void()" `551 
v L "flag" 2 777 "int8" `553 
f B "rtos_await" 2 777 "void(int8 flag)" `552 
v L "sem" 2 778 "int8" `555 
f B "rtos_wait" 2 778 "void(int8 sem)" `554 
v L "sem" 2 779 "int8" `557 
f B "rtos_signal" 2 779 "void(int8 sem)" `556 
v L "task" 2 780 "int8" `559 
v L "msg" 2 780 "int8" `560 
f B "rtos_msg_send" 2 780 "void(int8 task,int8 msg)" `558 
f B "rtos_msg_read" 2 781 "int8()" `561 
f B "rtos_msg_poll" 2 782 "int8()" `562 
v L "task" 2 783 "int8" `564 
f B "rtos_overrun" 2 783 "int8(int8 task)" `563 
v L "task" 2 784 "int8" `566 
v L "stat" 2 784 "*int8" `567 
f B "rtos_stats" 2 784 "void(int8 task,*int8 stat)" `565  "#use timer() Prototypes:"
f B "get_ticks" 2 787 "int8()" `568 
f G "get_ticks" 2 788 "int16()" `569 
f G "get_ticks" 2 789 "int32()" `570 
v L "stream" 2 790 "int8" `572 
f G "get_ticks" 2 790 "int8(int8 stream)" `571 
v L "stream" 2 791 "int8" `574 
f G "get_ticks" 2 791 "int16(int8 stream)" `573 
v L "stream" 2 792 "int8" `576 
f G "get_ticks" 2 792 "int32(int8 stream)" `575 
v L "value" 2 793 "int8" `578 
f B "set_ticks" 2 793 "void(int8 value)" `577 
v L "value" 2 794 "int16" `580 
f G "set_ticks" 2 794 "void(int16 value)" `579 
v L "value" 2 795 "int32" `582 
f G "set_ticks" 2 795 "void(int32 value)" `581 
v L "stream" 2 796 "int8" `584 
v L "value" 2 796 "int8" `585 
f G "set_ticks" 2 796 "void(int8 stream,int8 value)" `583 
v L "stream" 2 797 "int8" `584 
v L "value" 2 797 "int16" `588 
f G "set_ticks" 2 797 "void(int8 stream,int16 value)" `586 
v L "stream" 2 798 "int8" `584 
v L "value" 2 798 "int32" `591 
f G "set_ticks" 2 798 "void(int8 stream,int32 value)" `589  "#use pwm() Prototypes:"
f B "pwm_on" 2 801 "void()" `592 
v L "stream" 2 802 "int8" `594 
f G "pwm_on" 2 802 "void(int8 stream)" `593 
f B "pwm_off" 2 803 "void()" `595 
v L "stream" 2 804 "int8" `597 
f G "pwm_off" 2 804 "void(int8 stream)" `596 
v L "duty" 2 805 "int16" `599 
f B "pwm_set_duty" 2 805 "void(int16 duty)" `598 
v L "stream" 2 806 "int8" `601 
v L "duty" 2 806 "int16" `602 
f G "pwm_set_duty" 2 806 "void(int8 stream,int16 duty)" `600 
v L "percent" 2 807 "int16" `604 
f B "pwm_set_duty_percent" 2 807 "void(int16 percent)" `603 
v L "stream" 2 808 "int8" `606 
v L "percent" 2 808 "int16" `607 
f G "pwm_set_duty_percent" 2 808 "void(int8 stream,int16 percent)" `605 
v L "frequency" 2 809 "int32" `609 
f B "pwm_set_frequency" 2 809 "void(int32 frequency)" `608 
v L "stream" 2 810 "int8" `611 
v L "frequency" 2 810 "int32" `612 
f G "pwm_set_frequency" 2 810 "void(int8 stream,int32 frequency)" `610  "#use capture() Prototypes:"
f B "get_capture_time" 2 813 "int16()" `613 
v L "stream" 2 814 "int8" `615 
f G "get_capture_time" 2 814 "int16(int8 stream)" `614 
f B "get_capture_event" 2 815 "int8()" `616 
v L "stream" 2 816 "int8" `618 
f G "get_capture_event" 2 816 "int8(int8 stream)" `617  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 829 "int16" `620 
f B "goto_address" 2 829 "void(int16 address)" `619 
v L "label" 2 830 "int16" `622 
f B "label_address" 2 830 "int16(int16 label)" `621  "Program Memory Prototypes:"
v L "address" 2 833 "int16" `624 
v L "dataptr" 2 833 "*int8" `625 
v L "count" 2 833 "int16" `626 
f B "read_program_memory" 2 833 "void(int16 address,*int8 dataptr,int16 count)" `623 
v L "address" 2 834 "int16" `628 
f B "read_program_eeprom" 2 834 "int16(int16 address)" `627 
v L "address" 2 835 "int16" `630 
f B "erase_program_eeprom" 2 835 "void(int16 address)" `629 
v L "address" 2 836 "int16" `632 
v L "dataptr" 2 836 "*int8" `633 
v L "count" 2 836 "int16" `634 
f B "write_program_memory" 2 836 "void(int16 address,*int8 dataptr,int16 count)" `631 
v L "address" 2 837 "int16" `636 
v L "data" 2 837 "int16" `637 
f B "write_program_eeprom" 2 837 "void(int16 address,int16 data)" `635  "#use touchpad() Prototypes:"
v L "state" 2 840 "int8" `639 
f B "touchpad_state" 2 840 "void(int8 state)" `638 
f B "touchpad_getc" 2 841 "int8()" `640 
f B "touchpad_hit" 2 842 "int8()" `641  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
v L "interrupt" 2 848 "int32" `643 
f B "enable_interrupts" 2 848 "void(int32 interrupt)" `642 
v L "interrupt" 2 849 "int32" `645 
f B "disable_interrupts" 2 849 "void(int32 interrupt)" `644 
v L "interrupt" 2 850 "int32" `647 
f B "clear_interrupt" 2 850 "void(int32 interrupt)" `646 
v L "interrupt" 2 851 "int32" `649 
f B "interrupt_active" 2 851 "int8(int32 interrupt)" `648 
v L "interrupt" 2 852 "int32" `651 
f B "interrupt_enabled" 2 852 "int8(int32 interrupt)" `650 
v L "source" 2 853 "int8" `653 
v L "edge" 2 853 "int8" `654 
f B "ext_int_edge" 2 853 "void(int8 source,int8 edge)" `652 
v L "address" 2 854 "int16" `656 
f B "jump_to_isr" 2 854 "void(int16 address)" `655  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 856 "0x40"
d G "H_TO_L" 2 857 "0"
d G "GLOBAL" 2 859 "0xF2C0"
d G "PERIPH" 2 860 "0xF240"
d G "INT_RTCC" 2 861 "0x00F220"
d G "INT_TIMER0" 2 862 "0x00F220"
d G "INT_TIMER1" 2 863 "0x009D01"
d G "INT_TIMER2" 2 864 "0x009D02"
d G "INT_TIMER3" 2 865 "0x00A002"
d G "INT_EXT_L2H" 2 866 "0x5000F210"
d G "INT_EXT_H2L" 2 867 "0x6000F210"
d G "INT_EXT" 2 868 "0x00F210"
d G "INT_EXT1_L2H" 2 869 "0x5001F008"
d G "INT_EXT1_H2L" 2 870 "0x6001F008"
d G "INT_EXT1" 2 871 "0x00F008"
d G "INT_EXT2_L2H" 2 872 "0x5002F010"
d G "INT_EXT2_H2L" 2 873 "0x6002F010"
d G "INT_EXT2" 2 874 "0x00F010"
d G "INT_EXT3_L2H" 2 875 "0x5003F020"
d G "INT_EXT3_H2L" 2 876 "0x6003F020"
d G "INT_EXT3" 2 877 "0x00F020"
d G "INT_RB" 2 878 "0x00FFF208"
d G "INT_AD" 2 879 "0x009D40"
d G "INT_RDA" 2 880 "0x009D20"
d G "INT_TBE" 2 881 "0x009D10"
d G "INT_SSP" 2 882 "0x009D08"
d G "INT_CCP1" 2 883 "0x009D04"
d G "INT_CCP2" 2 884 "0x00A001"
d G "INT_BUSCOL" 2 885 "0x00A008"
d G "INT_RDA2" 2 886 "0x00A320"
d G "INT_TBE2" 2 887 "0x00A310"
d G "INT_TIMER4" 2 888 "0x00A308"
d G "INT_OSCF" 2 889 "0x00A080"
d G "INT_HLVD" 2 890 "0x00A004"
d G "INT_BUSCOL2" 2 891 "0x00A340"
d G "INT_USB" 2 892 "0x00A010"
d G "INT_SSP2" 2 893 "0x00A380"
d G "INT_RTC" 2 894 "0x00A301"
d G "INT_COMP" 2 895 "0x00A020"
d G "INT_COMP2" 2 896 "0x00A040"
D G "NOP" 3 2 "#asm nop #endasm"
D G "BTG" 3 3 "() #asm btg #endasm"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 3 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 2 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 2 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 3 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 2 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 3 6 1 "FUNCTION"
C L "jump_to_isr" 1 6 13 "FUNCTION"
C L "jump_to_isr" 0 2 1 "FUNCTION"
D G "swap" 5 7 "(a,b) { uint8_t t = a; a = b; b = t; }"
D G "SSD1306_DriverH" 5 9 ""
D G "BLACK" 5 11 "0"
D G "WHITE" 5 12 "1"
D G "SSD1306_128_64" 5 29 ""
D G "SSD1306_LCDWIDTH" 5 41 "128"
D G "SSD1306_LCDHEIGHT" 5 42 "64"
D G "PAGE_MODE" 5 50 "01"
D G "HORIZONTAL_MODE" 5 51 "02"
D G "SSD1306_Addres_Write" 5 53 "0x78"
D G "SSD1306_Addres_Read" 5 54 "0b01111001"
D G "SSD1306_Command_Mode" 5 56 "0x80"
D G "SSD1306_Data_Mode" 5 57 "0x40"
D G "SSD1306_SET_CONTRAST" 5 59 "0x81"
D G "SSD1306_DISPLAY_ALL_ON_RESUME" 5 60 "0xA4"
D G "SSD1306_DISPLAY_ALL_ON" 5 61 "0xA5"
D G "SSD1306_DISPLAY_NORMAL" 5 62 "0xA6"
D G "SSD1306_DISPLAY_INVERT" 5 63 "0xA7"
D G "SSD1306_DISPLAY_OFF" 5 64 "0xAE"
D G "SSD1306_DISPLAY_ON" 5 65 "0xAF"
D G "SSD1306_SET_DISPLAY_OFFSET" 5 67 "0xD3"
D G "SSD1306_SET_COMPINS" 5 68 "0xDA"
D G "SSD1306_SET_VCOM_DETECT" 5 70 "0xDB"
D G "SSD1306_SET_DISPLAY_CLOCK_DIV" 5 72 "0xD5"
D G "SSD1306_SET_PRECHARGE" 5 73 "0xD9"
D G "SSD1306_SET_MULTIPLEX" 5 75 "0xA8"
D G "SSD1306_SET_LOW_COLUM_N" 5 77 "0x00"
D G "SSD1306_SET_HIGH_COLUM_N" 5 78 "0x10"
D G "SSD1306_SET_START_LINE" 5 80 "0x40"
D G "SSD1306_MEMORY_MODE" 5 82 "0x20"
D G "SSD1306_COM_SCAN_INC" 5 84 "0xC0"
D G "SSD1306_COM_SCAN_DEC" 5 85 "0xC8"
D G "SSD1306_SEG_REMAP" 5 87 "0xA0"
D G "SSD1306_CHARGE_PUMP" 5 89 "0x8D"
D G "SSD1306_EXTERNAL_VCC" 5 91 "0x1"
D G "SSD1306_SWITCH_CAP_VCC" 5 92 "0x2"
D G "SSD1306_Activate_Scroll_Cmd" 5 94 "0x2F"
D G "SSD1306_Dectivate_Scroll_Cmd" 5 95 "0x2E"
D G "Scroll_Left" 5 97 "0x00"
D G "Scroll_Right" 5 98 "0x01"
D G "uint8" 5 100 "unsigned int8"
D G "uint16" 5 101 "unsigned int16"
V G "addressingMode" 5 103 "int8" `772 
f G "SSD1306_Init" 5 105 "int8()" `773 
f G "SSD1306_Init_X" 5 106 "int8()" `774 
V L "Command" 5 107 "int8" `776 
f G "SSD1306_SurchForAddres" 5 107 "int8(int8 Command)" `775 
V L "Command" 5 108 "int8" `778 
f G "SSD1306_SendCommand" 5 108 "int8(int8 Command)" `777 
V L "data" 5 109 "int8" `780 
f G "SSD1306_SendData" 5 109 "int8(int8 data)" `779 
V L "Brightness" 5 110 "int8" `782 
f G "SSD1306_setBrightness" 5 110 "void(int8 Brightness)" `781 
f G "SSD1306_setHorizontalMode" 5 112 "void()" `783 
f G "SSD1306_setPageMode" 5 113 "void()" `784 
V L "Row" 5 114 "int8" `786 
V L "Column" 5 114 "int8" `787 
f G "SSD1306_setTextXY" 5 114 "void(int8 Row,int8 Column)" `785 
f G "SSD1306_clearDisplay" 5 115 "void()" `788 
V L "C" 5 116 "int8" `790 
f G "SSD1306_putChar" 5 116 "void(int8 C)" `789 
V L "StringP" 5 117 "*int8" `792 
f G "SSD1306_putString" 5 117 "void(*int8 StringP)" `791 
V L "long_num" 5 118 "sint16" `794 
f G "SSD1306_putNumber" 5 118 "int8(sint16 long_num)" `793 
V L "bitmaparray" 5 119 "*int8" `796 
V L "bytes" 5 119 "int8" `797 
f G "SSD1306_drawBitmap" 5 119 "void(*int8 bitmaparray,int8 bytes)" `795 
V L "direction" 5 121 "int8" `799 
V L "startPage" 5 121 "int8" `800 
V L "endPage" 5 121 "int8" `801 
V L "scrollSpeed" 5 121 "int8" `802 
f G "SSD1306_setHorizontalScrollProperties" 5 121 "void(int8 direction,int8 startPage,int8 endPage,int8 scrollSpeed)" `798 
f G "SSD1306_activateScroll" 5 123 "void()" `803 
f G "SSD1306_deactivateScroll" 5 124 "void()" `804 
f G "SSD1306_setNormalDisplay" 5 125 "void()" `805 
f G "SSD1306_setInverseDisplay" 5 126 "void()" `806 
V G "BasicFont" 4 4 "[1][8]" `807 
V L "Command" 4 106 "int8" `812 
F G "SSD1306_SurchForAddres" 4 107 "int8(int8 Command)" `775 
V L "ACK1" 4 108 "int8" `811 
V L "ACK2" 4 108 "int8" `812 
V L "ACK3" 4 108 "int8" `813 
V L "count" 4 108 "int8" `814 
F G "SSD1306_Init_X" 4 127 "int8()" `774 
V L "Err" 4 128 "int8" `822 
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
C L "SSD1306_Init_X" 4 130 1 "FUNCTION"
F G "SSD1306_Init" 4 192 "int8()" `773 
V L "Err" 4 193 "int8" `840 
C L "SSD1306_Init" 4 130 1 "FUNCTION"
C L "SSD1306_Init" 4 130 1 "FUNCTION"
C L "SSD1306_Init" 4 130 1 "FUNCTION"
V L "Command" 4 206 "int8" `845 
F G "SSD1306_SendCommand" 4 207 "int8(int8 Command)" `777 
V L "ACK1" 4 208 "int8" `844 
V L "ACK2" 4 208 "int8" `845 
V L "ACK3" 4 208 "int8" `846 
C L "SSD1306_SendCommand" 4 130 1 "FUNCTION"
C L "SSD1306_SendCommand" 4 130 1 "FUNCTION"
V L "data" 4 225 "int8" `848 
F G "SSD1306_SendData" 4 226 "int8(int8 data)" `779 
V L "ACK1" 4 227 "int8" `847 
V L "ACK2" 4 227 "int8" `848 
V L "ACK3" 4 227 "int8" `849 
C L "SSD1306_SendData" 4 130 1 "FUNCTION"
C L "SSD1306_SendData" 4 130 1 "FUNCTION"
C L "SSD1306_SendData" 4 130 1 "FUNCTION"
V L "Brightness" 4 239 "int8" `851 
F G "SSD1306_setBrightness" 4 240 "void(int8 Brightness)" `781 
F G "SSD1306_setHorizontalMode" 4 247 "void()" `783 
C L "SSD1306_setHorizontalMode" 4 130 1 "FUNCTION"
C L "SSD1306_setHorizontalMode" 4 130 1 "FUNCTION"
F G "SSD1306_setPageMode" 4 255 "void()" `784 
C L "SSD1306_setPageMode" 4 130 1 "FUNCTION"
C L "SSD1306_setPageMode" 4 130 1 "FUNCTION"
V L "Row" 4 262 "int8" `786 
V L "Column" 4 262 "int8" `852 
F G "SSD1306_setTextXY" 4 263 "void(int8 Row,int8 Column)" `785 
C L "SSD1306_setTextXY" 4 130 1 "FUNCTION"
C L "SSD1306_setTextXY" 4 130 1 "FUNCTION"
C L "SSD1306_setTextXY" 4 130 1 "FUNCTION"
F G "SSD1306_clearDisplay" 4 270 "void()" `788 
V L "i" 4 271 "int8" `850 
V L "j" 4 271 "int8" `851 
C L "SSD1306_clearDisplay" 4 130 1 "FUNCTION"
C L "SSD1306_clearDisplay" 4 130 1 "FUNCTION"
C L "SSD1306_clearDisplay" 4 130 1 "FUNCTION"
V L "C" 4 288 "int8" `853 
F G "SSD1306_putChar" 4 289 "void(int8 C)" `789 
V L "i" 4 290 "int8" `852 
C L "SSD1306_putChar" 4 130 2 "FUNCTION"
C L "SSD1306_putChar" 4 130 1 "FUNCTION"
C L "SSD1306_putChar" 4 130 1 "FUNCTION"
C L "SSD1306_putChar" 4 130 1 "FUNCTION"
V L "StringP" 4 306 "*int8" `857 
F G "SSD1306_putString" 4 307 "void(*int8 StringP)" `791 
V L "StringL" 4 308 "*int8" `856 
V L "i" 4 309 "int8" `857 
V L "long_num" 4 319 "sint16" `859 
F G "SSD1306_putNumber" 4 320 "int8(sint16 long_num)" `793 
V L "char_buffer" 4 321 "int8[10]" `858 
V L "i" 4 322 "int8" `859 
V L "f" 4 323 "int8" `860 
V L "bitmaparray" 4 354 "*int8" `796 
V L "bytes" 4 354 "int8" `866 
F G "SSD1306_drawBitmap" 4 355 "void(*int8 bitmaparray,int8 bytes)" `795 
V L "localAddressMode" 4 356 "int8" `864 
C L "SSD1306_drawBitmap" 4 130 1 "FUNCTION"
V L "i" 4 363 "int8" `865 
C L "SSD1306_drawBitmap" 4 130 1 "FUNCTION"
V L "direction" 4 376 "int8" `799 
V L "startPage" 4 376 "int8" `800 
V L "endPage" 4 376 "int8" `801 
V L "scrollSpeed" 4 376 "int8" `870 
F G "SSD1306_setHorizontalScrollProperties" 4 377 "void(int8 direction,int8 startPage,int8 endPage,int8 scrollSpeed)" `798  "Use the following defines for 'direction' :"
C L "SSD1306_setHorizontalScrollProperties" 4 130 11 "FUNCTION"
C L "SSD1306_setHorizontalScrollProperties" 4 130 1 "FUNCTION"
C L "SSD1306_setHorizontalScrollProperties" 4 130 1 "FUNCTION"
F G "SSD1306_activateScroll" 4 413 "void()" `803 
F G "SSD1306_deactivateScroll" 4 418 "void()" `804 
F G "SSD1306_setNormalDisplay" 4 423 "void()" `805 
V L "Err" 4 424 "int8" `866 
C L "SSD1306_setNormalDisplay" 4 130 1 "FUNCTION"
F G "SSD1306_setInverseDisplay" 4 430 "void()" `806 
D G "DS3231_WriteX" 7 2 "0xD0"
D G "DS3231_ReadX" 7 3 "0xD1"
D G "Sec" 7 5 "0"
D G "TenSec" 7 6 "1"
D G "Min" 7 7 "2"
D G "TenMin" 7 8 "3"
D G "Hour" 7 9 "4"
D G "TenHour" 7 10 "5"
D G "Day" 7 12 "0"
D G "Date" 7 13 "1"
D G "TenDate" 7 14 "2"
D G "Month" 7 15 "3"
D G "TenMonth" 7 16 "4"
D G "Year" 7 17 "5"
D G "TenYear" 7 18 "6"
D G "Sec_Mask" 7 20 "0b00001111"
D G "TenSec_Mask" 7 21 "0b01110000"
D G "Min_Mask" 7 22 "0b00001111"
D G "TenMin_Mask" 7 23 "0b01110000"
D G "Hour_Mask" 7 24 "0b00001111"
D G "TenHour_Mask" 7 25 "0b00110000"
D G "Day_Mask" 7 27 "0b00000111"
D G "Date_Mask" 7 28 "0b00001111"
D G "TenDate_Mask" 7 29 "0b00110000"
D G "Month_Mask" 7 30 "0b00001111"
D G "TenMonth_Mask" 7 31 "0b00010000"
D G "Year_Mask" 7 32 "0b00001111"
D G "TenYear_Mask" 7 33 "0b11110000"
D G "Monday" 7 35 "1"
D G "Tuesday" 7 36 "2"
D G "Wednesday" 7 37 "3"
D G "Thursday" 7 38 "4"
D G "Friday" 7 39 "5"
D G "Saturday" 7 40 "6"
D G "Sunday" 7 41 "7"
V L "u8AddresP" 7 44 "int8" `868 
V L "pDataP" 7 44 "*int8" `869 
V L "u8NumberOfBytesP" 7 44 "int8" `870 
f G "DS3231_Write" 7 44 "void(int8 u8AddresP,*int8 pDataP,int8 u8NumberOfBytesP)" `867 
V L "u8AddresP" 7 45 "int8" `872 
V L "pDataP" 7 45 "*int8" `873 
V L "u8NumberOfBytesP" 7 45 "int8" `874 
f G "DS3231_Read" 7 45 "void(int8 u8AddresP,*int8 pDataP,int8 u8NumberOfBytesP)" `871 
V L "u8AddresP" 7 47 "int8" `876 
V L "pDataP" 7 47 "*int8" `877 
V L "u8NumberOfBytesP" 7 47 "int8" `878 
f G "DS3231_Reade_Pointer" 7 47 "int8(int8 u8AddresP,*int8 pDataP,int8 u8NumberOfBytesP)" `875 
V L "u8FlagInitP" 7 49 "int8" `880 
V L "pDataP" 7 49 "*int8" `881 
f G "DS3231_Init_Clock" 7 49 "void(int8 u8FlagInitP,*int8 pDataP)" `879 
V L "u8FlagInitP" 7 50 "int8" `883 
V L "pDataP" 7 50 "*int8" `884 
f G "DS3231_Init_Data" 7 50 "void(int8 u8FlagInitP,*int8 pDataP)" `882 
V L "pDataP" 7 51 "*int8" `886 
f G "DS3231_Read_Clock" 7 51 "void(*int8 pDataP)" `885 
V L "pDataP" 7 53 "*int8" `888 
f G "DS3231_Read_Data" 7 53 "void(*int8 pDataP)" `887 
V L "pDataP" 7 54 "*int8" `890 
f G "DS3231_Print_Data" 7 54 "void(*int8 pDataP)" `889  ""
V L "u8AddresP" 6 6 "int8" `868 
V L "pDataP" 6 6 "*int8" `869 
V L "u8NumberOfBytesP" 6 6 "int8" `894 
F G "DS3231_Write" 6 7 "void(int8 u8AddresP,*int8 pDataP,int8 u8NumberOfBytesP)" `867 
V L "u8ByteCountL" 6 8 "int8" `891 
C L "DS3231_Write" 6 19 1 "FUNCTION"
V L "u8AddresP" 6 23 "int8" `872 
V L "pDataP" 6 23 "*int8" `873 
V L "u8NumberOfBytesP" 6 23 "int8" `895 
F G "DS3231_Read" 6 24 "void(int8 u8AddresP,*int8 pDataP,int8 u8NumberOfBytesP)" `871 
V L "u8ByteCountL" 6 25 "int8" `892 
C L "DS3231_Read" 6 19 1 "FUNCTION"
C L "DS3231_Read" 6 19 1 "FUNCTION"
C L "DS3231_Read" 6 19 5 "FUNCTION"
C L "DS3231_Read" 6 19 1 "FUNCTION"
C L "DS3231_Read" 6 19 2 "FUNCTION"
V L "u8AddresP" 6 47 "int8" `876 
V L "pDataP" 6 47 "*int8" `877 
V L "u8NumberOfBytesP" 6 47 "int8" `896 
F G "DS3231_Reade_Pointer" 6 48 "int8(int8 u8AddresP,*int8 pDataP,int8 u8NumberOfBytesP)" `875 
V L "u8ByteCountL" 6 49 "int8" `893 
V L "pAckL" 6 50 "int8[3]" `894 
C L "DS3231_Reade_Pointer" 6 19 1 "FUNCTION"
C L "DS3231_Reade_Pointer" 6 19 1 "FUNCTION"
V L "u8FlagInitP" 6 71 "int8" `880 
V L "pDataP" 6 71 "*int8" `897 
F G "DS3231_Init_Clock" 6 72 "void(int8 u8FlagInitP,*int8 pDataP)" `879 
V L "u8TenSecL" 6 73 "int8" `895 
V L "u8SecL" 6 74 "int8" `896 
V L "u8TenMinL" 6 75 "int8" `897 
V L "u8MinL" 6 76 "int8" `898 
V L "u8TenHourL" 6 77 "int8" `899 
V L "u8HourL" 6 78 "int8" `900 
V L "u8FlagInitP" 6 104 "int8" `883 
V L "pDataP" 6 104 "*int8" `903 
F G "DS3231_Init_Data" 6 105 "void(int8 u8FlagInitP,*int8 pDataP)" `882 
V L "u8TenDateL" 6 106 "int8" `901 
V L "u8DateL" 6 107 "int8" `902 
V L "u8TenMonthL" 6 108 "int8" `903 
V L "u8MonthL" 6 109 "int8" `904 
V L "u8TenYearL" 6 110 "int8" `905 
V L "u8YearL" 6 111 "int8" `906 
V L "pDataP" 6 139 "*int8" `908 
F G "DS3231_Read_Clock" 6 140 "void(*int8 pDataP)" `885 
V L "ClockBuff" 6 141 "int8[3]" `907 
V L "pDataP" 6 153 "*int8" `909 
F G "DS3231_Print_Clock" 6 154 "void(*int8 pDataP)" `908 
V L "pDataP" 6 163 "*int8" `918 
F G "DS3231_Read_Data" 6 164 "void(*int8 pDataP)" `887 
V L "ClockBuff" 6 165 "int8[4]" `917 
V L "pDataP" 6 179 "*int8" `919 
F G "DS3231_Print_Data" 6 180 "void(*int8 pDataP)" `889 
F G "MAIN" 0 8 "void()" `927 
V L "DataL" 0 9 "int8[16]" `928 
V L "u8Count" 0 10 "int8" `929 
V L "u8AckL" 0 11 "int8" `930 
C L "MAIN" 0 28 6 "FUNCTION"
C L "MAIN" 0 28 1 "FUNCTION"
C L "MAIN" 0 28 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "release_io" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "pin_select" 2 4
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 3 0
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "i2c_init" 1 2
